@page "/game"
@using TriviaMusical.Models
@using TriviaMusical.Services
@inject IConfiguration Configuration
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject MusicaService MusicaService

<style>
    .cartas-jogo {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 10px;
        margin: 20px;
    }

    .carta {
        padding: 10px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .botao-entre, .botao-antes, .botao-depois {
        margin: 40%;
        width: 30%;
        height: 20%;
        font-size: 10px;
        box-sizing: border-box;
    }

    .modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        padding: 30px;
        border: 2px solid #000;
        z-index: 1000;
        text-align: center;
        width: 300px;
    }

        .modal h2 {
            font-size: 24px;
            margin-bottom: 15px;
        }

        .modal button {
            margin: 5px;
        }
</style>
<div class="text-center">
    <h3>Trivia Musical</h3>
    <p>Pontuação: @PontuacaoJogador</p>
</div>

<iframe id="player-musica" src="https://www.youtube.com/embed/@(MusicaReferencia.Last().IdMusica)?autoplay=1" allow="autoplay"></iframe>

<main>

    <div class="cartas-jogo">
        @foreach (var musica in MusicaJogoOrdenada)
        {
            // Renderizar a primeira carta com o botão "Antes"
            @if (MusicaJogoOrdenada.IndexOf(musica) == 0)
            {
                <button class="botao-antes" @onclick="() => compararAntes(musica.AnoLancamento)">Antes</button>
            }

            // Renderizar o botão "Entre" entre as cartas
            <div class="carta">
                <p>@musica.NomeDoCantor</p>
                <p style="font-size: 24px;">@musica.AnoLancamento</p>
                <p>@musica.NomeMusica</p>
            </div>

            if (
            MusicaJogoOrdenada.IndexOf(musica) != MusicaJogoOrdenada.Count - 1 && musica.AnoLancamento != MusicaJogoOrdenada[MusicaJogoOrdenada.IndexOf(musica) + 1].AnoLancamento)
            {
                <button class="botao-entre" @onclick="() => compararEntre(musica.AnoLancamento)">Entre</button>
            }
        }

        <button class="botao-depois" @onclick="() => compararDepois(MusicaJogoOrdenada.Last().AnoLancamento)">Depois</button>

        @if (JogoFinalizado)
        {
            <div class="modal" style="display:block; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); background-color:white; padding:20px; border:1px solid black;">
                <h2>@MensagemVitoria</h2>
                <p>Escolha uma opção:</p>
                <button class="btn btn-primary" onclick="location.reload()">Jogar Novamente</button>
                <button class="btn btn-secondary" @onclick="MudarDeJogo">Mudar de Jogo</button>
            </div>
        }

    </div>
</main>

@code {
    private List<Musica> MusicaReferencia = new List<Musica>();
    private List<Musica> MusicaJogo = new List<Musica>();
    private MusicaService _musicaService;
    private Musica novaReferencia;
    private List<Musica> MusicaJogoOrdenada = new List<Musica>();
    private int PontuacaoJogador = 0;
    private DateTime TempoInicio;
    private bool JogoFinalizado = false; // Flag para determinar se o jogo acabou
    private string MensagemVitoria = string.Empty; // Armazena a mensagem de vitória

    protected override void OnInitialized()
    {
        _musicaService = new MusicaService(Configuration);
    }

    protected override async Task OnInitializedAsync()
    {

        // Inicializa o jogo e a pontuação
        PontuacaoJogador = 0;
        JogoFinalizado = false;
        MusicaJogoOrdenada.Clear();
        AdicionarMusicaAleatoria();
    }

    [JSInvokable]
    public void AdicionarMusicaAleatoria()
    {
        Musica novaReferencia;
        Musica novaMusica;


        // Gera uma música aleatória que ainda não foi adicionada
        novaReferencia = _musicaService.ObterMusicaAleatoria();
        // Define o tempo de início para essa jogada
        TempoInicio = DateTime.Now;
        MusicaReferencia.Add(novaReferencia);

        // Se a lista MusicaJogoOrdenada está vazia, adiciona a nova música e ordena
        if (MusicaJogoOrdenada.Count == 0)
        {
            novaMusica = _musicaService.ObterMusicaAleatoria();
            MusicaJogo.Add(novaMusica);
            MusicaJogoOrdenada.Add(novaMusica);  // Ordena a lista            
            StateHasChanged();  // Atualiza a interface
            return;  // Sai da função
        }

        // Caso já haja músicas, adiciona a nova e ordena novamente
        MusicaJogoOrdenada = MusicaJogo.OrderBy(m => m.AnoLancamento).ToList();
        
        StateHasChanged();  // Atualiza a interface
    }

    public void compararAntes(int anoMusica)
    {
        var ultimoAnoReferencia = MusicaReferencia.Last().AnoLancamento;

        if (ultimoAnoReferencia <= anoMusica)
        {
            // Resposta correta
            MusicaJogo.Add(MusicaReferencia.Last());
            AdicionarMusicaAleatoria();
            AtualizarPontuacao(true); // Atualiza a pontuação com resposta correta
        }
        else
        {
            // Resposta incorreta
            AtualizarPontuacao(false); // Não ganha ponto
            AdicionarMusicaAleatoria();
        }
    }

    public void compararDepois(int anoMusica)
    {
        var ultimoAnoReferencia = MusicaReferencia.Last().AnoLancamento;

        if (ultimoAnoReferencia >= anoMusica)
        {
            // Resposta correta
            MusicaJogo.Add(MusicaReferencia.Last());
            AdicionarMusicaAleatoria();
            AtualizarPontuacao(true); // Atualiza a pontuação com resposta correta
        }
        else
        {
            // Resposta incorreta
            AtualizarPontuacao(false); // Não ganha ponto
            AdicionarMusicaAleatoria();
        }
    }

    public void compararEntre(int anoMusica)
    {
        var ultimoAnoReferencia = MusicaReferencia.Last().AnoLancamento;

        // Ordenar MusicaJogo por AnoLancamento (caso não esteja ordenado)
        var MusicaJogoOrdenada = MusicaJogo.OrderBy(m => m.AnoLancamento).ToList();

        // Encontrar dois anos consecutivos em MusicaJogoOrdenada que cercam o ultimoAnoReferencia
        for (int i = 0; i < MusicaJogoOrdenada.Count - 1; i++)
        {
            int anoAnterior = MusicaJogoOrdenada[i].AnoLancamento;
            int anoPosterior = MusicaJogoOrdenada[i + 1].AnoLancamento;

            // Verificar se ultimoAnoReferencia está entre anoAnterior e anoPosterior
            if (ultimoAnoReferencia >= anoAnterior && ultimoAnoReferencia <= anoPosterior)
            {
                // Está entre os dois anos
                MusicaJogo.Add(MusicaReferencia.Last());
                AdicionarMusicaAleatoria();
                AtualizarPontuacao(true); // Atualiza a pontuação com resposta correta
                return;
            }
        }
        // Caso o ultimoAnoReferencia não esteja entre dois anos
        // Resposta incorreta
        AtualizarPontuacao(false); // Não ganha ponto
        AdicionarMusicaAleatoria();
    }
    // Método para calcular pontos com base na rapidez
    public void AtualizarPontuacao(bool respostaCorreta)
    {
        if (respostaCorreta)
        {
            TimeSpan tempoResposta = DateTime.Now - TempoInicio;
            int pontosBase = 100; // Pontuação base para respostas corretas

            // Quanto mais rápido, maior a pontuação
            // Exemplo: Resposta em menos de 5 segundos ganha 100 pontos, depois diminui gradualmente
            if (tempoResposta.TotalSeconds < 5)
                PontuacaoJogador += pontosBase;
            else if (tempoResposta.TotalSeconds < 10)
                PontuacaoJogador += pontosBase / 2;
            else
                PontuacaoJogador += pontosBase / 4;

            // Verifica se o jogador atingiu 500 pontos
            if (PontuacaoJogador >= 500)
            {
                FinalizarJogo();
            }
        }
    }
    // Método para finalizar o jogo e exibir a mensagem de vitória
    public void FinalizarJogo()
    {
        JogoFinalizado = true;
        MensagemVitoria = "Vencedor!!! Você atingiu 500 pontos.";
        StateHasChanged(); // Atualiza a UI para exibir a mensagem de vitória
    }

    // Método para reiniciar o jogo
    public void JogarNovamente()
    {
        
        MusicaService.CarregarMusicas();
       // Chama o método para carregar músicas
        var musicasCarregadas = MusicaService.ObterMusicas(); // Obter a lista atualizada
        // Aqui você pode usar a lista carregada conforme necessário
        MusicaJogoOrdenada.Clear();
        AdicionarMusicaAleatoria(); // Reinicia o jogo
    }

    // Método para mudar de jogo, redirecionando para a página inicial
    public void MudarDeJogo() // Isso causará o erro
    {
        Navigation.NavigateTo("/");
    }
}
<script src="js/site.js"></script>
